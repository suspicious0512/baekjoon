1. 문제는 품
2. 시간 초과가 남
3. 그냥 같으면 해당 연산 하는걸로함
4. queue 크기가 0이면 -1로 출력하는게 있어서 묶어봄

제한시간 1초면 1억번 연산가능한데 주어진 명령수가 2백만 까지라 한 명령수마다 할수 있는 연산은 50번까지밖에 안됨

내가 짠 코드상 가장 오래 찾는것은 명령이 "back"일때 13번인데 왜지? 왜 시간 초과 나는거지?

아예 다른 걸로 짜야하나....
-----------------------------------------------------------------------------------------------------

package main;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main 
{

	public static void main(String[] args) throws IOException
	{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		int n = Integer.parseInt(br.readLine());
		
		Queue <Integer> queue = new LinkedList<Integer>();
		
		for(int i=0;i<n;i++) 
		{
			StringTokenizer st = new StringTokenizer(br.readLine());
			String s = st.nextToken();
			int num = 0;
			
			if(st.hasMoreTokens()) 
			{
				num = Integer.parseInt(st.nextToken());
			}
			
			if(queue.isEmpty()) 
			{
				if(s.equals("pop")||s.equals("front")||s.equals("back")) 
				{
					System.out.println("-1");
					continue;
				}
			}
			
			if(s.equals("push")) 
			{
				if(num!=0) 
				{
					queue.add(num);
					continue;
				}
				
			}
			else if(s.equals("pop")) 
			{
				System.out.println(queue.poll());
				continue;
			}
			else if(s.equals("size")) 
			{
				System.out.println(queue.size());
				continue;
			}
			else if(s.equals("empty")) 
			{
				if(queue.isEmpty()) 
				{
					System.out.println("1");
					continue;
				}
				else {
					System.out.println("0");
					continue;
				}
			}
			else if(s.equals("front")) 
			{
				System.out.println(queue.peek());
				continue;
			}
			else if(s.equals("back")) 
			{
				System.out.println(((LinkedList<Integer>) queue).getLast());
				continue;
			}
			
		}
		
		

	}

}
